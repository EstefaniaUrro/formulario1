{"version":3,"sources":["Componente/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","__montarNombre","nombre","entrada","split","salida","forEach","dato","__gestionEnvio","e","preventDefault","console","log","state","__gestionInputCambia","target","value","type","checked","nombreCampo","id","setState","className","htmlFor","name","placeholder","this","onChange","correo","isActive","fruta","onClick","Component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAEqBA,E,kDAOjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,eAAiB,SAACC,GACd,IAAMC,EAAUD,EAAOE,MAAM,KACzBC,EAAS,GAIb,OAHAF,EAAQG,SAAQ,SAAAC,GACZF,GAAUE,EAAO,OAEdF,GAVQ,EAYnBG,eAAiB,SAACC,GACdA,EAAEC,iBACFC,QAAQC,IAAI,EAAKX,eAAe,EAAKY,MAAMX,SAC3CS,QAAQC,IAAI,EAAKC,QAfF,EAiBnBC,qBAAuB,SAACL,GACpB,IAAMM,EAASN,EAAEM,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAcJ,EAAOK,GAC3B,EAAKC,SAAL,eACKF,EAAcH,KApBnB,EAAKH,MAAL,eAAkB,EAAKb,OAFR,E,qDA2Bf,OACI,oCACI,yBAAKsB,UAAU,aACX,0CACA,8BACI,yBAAKA,UAAU,cACX,2BAAOC,QAAQ,UAAf,UACA,2BACID,UAAU,eACVL,KAAK,OACLG,GAAG,SACHI,KAAK,SACLC,YAAY,oBACZT,MAAOU,KAAKb,MAAMX,OAClByB,SAAUD,KAAKZ,wBAGvB,yBAAKQ,UAAU,cACX,2BAAOC,QAAQ,UAAf,sBACA,2BACID,UAAU,eACVL,KAAK,QACLG,GAAG,SACHI,KAAK,SACLC,YAAY,gCACZT,MAAOU,KAAKb,MAAMe,OAClBD,SAAUD,KAAKZ,wBAGvB,yBAAKQ,UAAU,cACX,2BAAOL,KAAK,WACRK,UAAU,mBACVF,GAAG,WACHJ,MAAOU,KAAKb,MAAMgB,SAClBF,SAAUD,KAAKZ,uBACnB,2BAAOQ,UAAU,mBAAmBC,QAAQ,YAA5C,aAEJ,yBAAKD,UAAU,cACX,2BAAOC,QAAQ,SAAf,mBACA,4BACID,UAAU,eACVF,GAAG,QACHJ,MAAOU,KAAKb,MAAMiB,MAClBH,SAAUD,KAAKZ,sBACf,+CACA,4BAAQE,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,cAGR,4BACIC,KAAK,SACLK,UAAU,kBACVS,QAASL,KAAKlB,gBAHlB,iB,GAtFgBwB,aAAnBjC,EACVkC,aAAe,CAClB/B,OAAQ,YACR0B,OAAQ,GACRC,UAAU,EACVC,MAAO,SCKAI,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.7dd3d0e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Formulario extends Component {\r\n    static defaultProps = {\r\n        nombre: \"un nombre\",\r\n        correo: \"\",\r\n        isActive: true,\r\n        fruta: \"mango\"\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { ...this.props } //para sustituir los valores que me envian\r\n    }\r\n    __montarNombre = (nombre) => {\r\n        const entrada = nombre.split(' ');\r\n        let salida = \"\";\r\n        entrada.forEach(dato => {\r\n            salida += dato + \",\";\r\n        })\r\n        return salida;\r\n    }\r\n    __gestionEnvio = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.__montarNombre(this.state.nombre));\r\n        console.log(this.state);\r\n    }\r\n    __gestionInputCambia = (e) => {\r\n        const target = e.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const nombreCampo = target.id;\r\n        this.setState({\r\n            [nombreCampo]: value\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <h1>Formulario</h1>\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"nombre\">Nombre</label>\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                id=\"nombre\"\r\n                                name=\"nombre\"\r\n                                placeholder=\"Ingrese un nombre\"\r\n                                value={this.state.nombre}\r\n                                onChange={this.__gestionInputCambia}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"correo\">Correo Electronico</label>\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"email\"\r\n                                id=\"correo\"\r\n                                name=\"correo\"\r\n                                placeholder=\"Ingrese un correo electronico\"\r\n                                value={this.state.correo}\r\n                                onChange={this.__gestionInputCambia}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id=\"isActive\"\r\n                                value={this.state.isActive}\r\n                                onChange={this.__gestionInputCambia} />\r\n                            <label className=\"form-check-label\" htmlFor=\"isActive\">Activado</label>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"fruta\"> Fruta favorito</label >\r\n                            <select\r\n                                className=\"form-control\"\r\n                                id=\"fruta\"\r\n                                value={this.state.fruta}\r\n                                onChange={this.__gestionInputCambia}>\r\n                                <option>Seleccionar</option>\r\n                                <option value=\"fresa\">Fresa</option>\r\n                                <option value=\"mora\">Mora</option>\r\n                                <option value=\"mango\">Mango</option>\r\n                                <option value=\"maracuya\">Maracuya</option>\r\n                                <option value=\"limon\">Lim√≥n</option>\r\n                            </select>\r\n                        </div>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            onClick={this.__gestionEnvio}>Enviar</button>\r\n                    </form >\r\n                </div >\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Formulario from './Componente/Formulario';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Formulario />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}